#@ load("@ytt:base64", "base64")
#@ load("@ytt:yaml", "yaml")

#@ harborCert = """-----BEGIN CERTIFICATE-----
#@ MIIFyzCCA7OgAwIBAgIUHi+yaSAPzylp5MULPXk/FxXi0t8wDQYJKoZIhvcNAQEL
#@ BQAwIDEeMBwGA1UEAwwVKi4xMC4yMjAuMy4xOTcubmlwLmlvMB4XDTIyMTAyNDE5
#@ MzkxM1oXDTMyMDcyMzE5MzkxM1owIDEeMBwGA1UEAwwVKi4xMC4yMjAuMy4xOTcu
#@ bmlwLmlvMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAt+B4Kbil/hQd
#@ piEeRSB9o+y53pyNFDSWXQHYLjkP8oAqtDUOqmODRz0b3Dv7stRFKmjcsO7JpV+9
#@ BsiVE+vZlvhAOIH/lcRG8S+PGDTOnWGuCUlHpvJeFWbl6QiLfIrwdoVnFONCxcII
#@ /XXoOdHzA39RLwRI0NqaFJNT6dVtkhWH2njSW56nMSClOEKisesC3CCXcHrCtmvd
#@ HQ+/C5TJH3MOrV/H6XTVzta1jU57zzQVmgWj+fPa6gDIATMY//1OX8cHN9z1w4kD
#@ /lSSo1xlqw1A49pEs8dIwdF2AhHF7pUixRuoDEqtKH1EccNRXvhyy/7L3/Tdq5I7
#@ BIpGIcqx+aqH9j8PMz7zIX3NzoB564GX7eu2duEZYYzRxv7/e1qdCNNwAeB2KRtE
#@ uqiCgRAR9r0DxylQUS7j1bQZ/ZEpn8Xwqoh0NNpov3ralLqEH4Pres/g+1D6RfF9
#@ EumaMkXAk2AnKO+6fpTURaNJd2dqnf/PmW7oBYlAi4H2U51Rz9BAhT0txpBQtHxA
#@ YlMovWRkOlps+u0F9cPPfew8/k52hP5UuuXMDBArAvau6NHGZeABPGdoPu9onkyz
#@ tRDqfTy54TtVAoJuzvADb1wvtJm4GE5YtAeRDi8G9pXmRvlF0k/+9L1C43QPmOL7
#@ OPr9cy8E3ezIBxoKc/gQe82/8iHa+uMCAwEAAaOB/DCB+TAdBgNVHQ4EFgQURVoa
#@ uraPWgrxEFxjc2FdWjruOd8wWwYDVR0jBFQwUoAURVoauraPWgrxEFxjc2FdWjru
#@ Od+hJKQiMCAxHjAcBgNVBAMMFSouMTAuMjIwLjMuMTk3Lm5pcC5pb4IUHi+yaSAP
#@ zylp5MULPXk/FxXi0t8wDAYDVR0TBAUwAwEB/zAOBgNVHQ8BAf8EBAMCA4gwOwYD
#@ VR0lBDQwMgYIKwYBBQUHAwEGCCsGAQUFBwMCBggrBgEFBQcDAwYIKwYBBQUHAwQG
#@ CCsGAQUFBwMRMCAGA1UdEQQZMBeCFSouMTAuMjIwLjMuMTk3Lm5pcC5pbzANBgkq
#@ hkiG9w0BAQsFAAOCAgEAhZNFRZBrzY7gqtdxrZndUXAIAztSRfzNpbr1H/xq2FS+
#@ erQT0GJE3aKFl9c5oZxek5tz4QQxZMzLNo0qvucFD42uFMZBfbATJwYWEN5pDp+W
#@ oR3MhWD3ztlSg2GDDkg57tel3PuKjlardBdvpG0tr9zaxpVftE3g3aDEO3e5hSp8
#@ BouFFOtGyQ+TiNhgBs2J9JodzwfcZOtXa2xG0PDEHz246gz7bve6QMRzdIlgksjV
#@ yxGcZDjZSatiHh96HjDbVPCkh8Bt09UotfGWvUubS8NQI8MtXK4Qvc/25Rs281Et
#@ y/KRp4ifc8zki687FCS1kzhO3soA44bdg1sr5teXL5VRqH6Bt6ln2wr5I7ZaRYhf
#@ mbYJqqsTIKwxW0Pjc0ncENIw/IsNtsRbefqLIoUa5ctN9d9IO2k3btFA1Ej/UUSr
#@ TIFki/TXiqI4QtgTgsXIHgv55QpvmrhRV10PsLfdajyOnDUWtvHGUBwiGMmfmbzG
#@ Yd8bsuB1N3mmhyshwqMnKxniNnWrprfD6Gi7BA7PKKT7QM9voebmEg8bPGeRjXVC
#@ hso93H1eUeWuEb372sxa7F4chKLscF1CnPZwMm1870fIIX2pmaVAaPUPSWuwddrA
#@ Iy0PgRgEyDNcIUiL7jiK8vxnpevq/AZiw126suRWw9UaE4li84UVUNj8egyhQkU=
#@ -----END CERTIFICATE-----"""

#@ clusterName = "horlh-w5"
#@ clusterNS = "ns01"
#@ baseNS = "base"

---
#@ baseAppName = "{}-base".format(clusterName)
#@ clusterSA = "{}-deployer".format(clusterName)
#@ clusterCG = "{}.{}/cluster".format(clusterNS, clusterName)
#@ baseAppCG = "{}.{}/base".format(clusterNS, clusterName)
---
apiVersion: run.tanzu.vmware.com/v1alpha2
kind: TanzuKubernetesCluster
metadata:
  name: #@ clusterName
  namespace: #@ clusterNS
  annotations:
    kapp.k14s.io/change-group: #@ clusterCG
spec:
  topology:
    controlPlane:
      replicas: 1
      storageClass: vc01cl01-t0compute
      vmClass: best-effort-medium
      tkr: &tkr
        reference:
          name: v1.20.12---vmware.1-tkg.1.b9a42f3
    nodePools:
    - name: workers
      replicas: 1
      storageClass: vc01cl01-t0compute
      vmClass: best-effort-medium
      tkr: *tkr
  settings:
    network:
      trust:
        additionalTrustedCAs:
        - name: internal harbor
          data: #@ base64.encode(harborCert)

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: #@ clusterSA
  namespace: #@ clusterNS
  annotations:
    kapp.k14s.io/change-rule.0: #@ "upsert before upserting {}".format(baseAppCG)
    kapp.k14s.io/change-rule.1: #@ "delete after deleting {}".format(baseAppCG)
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: #@ clusterSA
  namespace: #@ clusterNS
  annotations:
    kapp.k14s.io/change-rule.0: #@ "upsert before upserting {}".format(baseAppCG)
    kapp.k14s.io/change-rule.1: #@ "delete after deleting {}".format(baseAppCG)
rules:
- apiGroups: [ kappctrl.k14s.io ]
  resources: [ apps ]
  verbs: [ "*" ]
- apiGroups: [ packaging.carvel.dev ]
  resources: [ packageinstalls ]
  verbs: [ "*" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: #@ clusterSA
  namespace: #@ clusterNS
  annotations:
    kapp.k14s.io/change-rule.0: #@ "upsert before upserting {}".format(baseAppCG)
    kapp.k14s.io/change-rule.1: #@ "delete after deleting {}".format(baseAppCG)
subjects:
- kind: ServiceAccount
  name: #@ clusterSA
  namespace: #@ clusterNS
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: #@ clusterSA


---
#@ def clusterConf(clusterName, ns):
namespace: #@ ns
kubeconfigSecretRef:
  name: #@ "{}-kubeconfig".format(clusterName)
  key: value
#@ end
---
apiVersion: kappctrl.k14s.io/v1alpha1
kind: App
metadata:
  name: #@ baseAppName
  namespace: #@ clusterNS
  annotations:
    kapp.k14s.io/change-group: #@ baseAppCG
    kapp.k14s.io/change-rule.create: #@ "upsert after upserting {}".format(clusterCG)
    kapp.k14s.io/change-rule.delete: #@ "delete before deleting {}".format(clusterCG)
spec:
  serviceAccountName: #@ clusterSA
  fetch:
  - git:
      url: git@github.com:hoegaarden/bingo
      ref: main
      subPath: example-kapp-controller
      secretRef:
        name: git-repo
  - inline:
      paths:
        values-base-ns.yml: #@ yaml.encode({"base":{"namespace": baseNS}})
        values.yml: #@ yaml.encode({"cluster": clusterConf(clusterName, baseNS), "baseAppName":baseAppName})
        patch-apps-and-pkgis.yml: |
          #@ load("@ytt:data", "data")
          #@ load("@ytt:overlay", "overlay")

          #@ apps = overlay.subset({"kind":"App", "apiVersion":"kappctrl.k14s.io/v1alpha1"})
          #@ pkgis = overlay.subset({"kind":"PackageInstall", "apiVersion":"packaging.carvel.dev/v1alpha1"})

          #@overlay/match by=overlay.or_op(apps, pkgis), expects="0+"
          ---
          metadata:
            #! override the name, e.g. 'cert-manager' -> 'cluster1-base-cert-manager'
            #@overlay/replace via=lambda left, right: "{}-{}".format(right, left)
            name: #@ data.values.baseAppName
          spec:
            #@overlay/match missing_ok=True
            #@overlay/remove
            serviceAccountName:
            #@overlay/match missing_ok=True
            cluster: #@ data.values.cluster

          #@ nonNamspaced = overlay.subset({"metadata":{"annotations":{"no.namespace":""}}})

          #@overlay/match by=nonNamspaced, expects="0+"
          ---
          spec:
            #@overlay/match missing_ok=True
            cluster:
              #@overlay/match missing_ok=True
              #@overlay/remove
              namespace:

  template:
  - ytt:
      paths:
      - "0/workloads/in-supervisor/common/"
      - #@ "0/workloads/in-supervisor/{}/{}/".format(clusterNS, clusterName)
      valuesFrom:
      - path: #@ "0/configs/{}/{}/".format(clusterNS, clusterName)
      - path: 1/values-base-ns.yml
  - ytt:
      paths:
      - "-"
      - 1/patch-apps-and-pkgis.yml
      valuesFrom:
      - path: 1/values.yml
  deploy:
  - kapp:
      rawOptions:
      - "--diff-changes=true"
      - "--dangerous-allow-empty-list-of-resources=true"
      - "--wait-timeout=5m"
      - "--kube-api-qps=20"
      - "--kube-api-burst=30"
