#@ load("@ytt:data", "data")
#@ dv = data.values

#! ---
#! apiVersion: v1
#! kind: Namespace
#! metadata:
#!   name: #@ dv.bingo.namespace

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: bingo
  namespace: #@ dv.bingo.namespace

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: bingo
  namespace: bingo
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["create","update","get","list","delete","patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: bingo
  namespace: #@ dv.bingo.namespace
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: bingo
subjects:
- kind: ServiceAccount
  name: bingo
  namespace: #@ dv.bingo.namespace

#@ for ns in dv.namespaces:
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: bingo
  namespace: #@ ns
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["create","update","get","list","delete","patch"]
- apiGroups: ["run.tanzu.vmware.com"]
  resources: ["tanzukubernetesclusters"]
  verbs: ["create","update","get","list","delete","patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: bingo
  namespace: #@ ns
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: bingo
subjects:
- kind: ServiceAccount
  name: bingo
  namespace: #@ dv.bingo.namespace
#@ end

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bingo
  namespace: #@ dv.bingo.namespace
spec:
  replicas: 1
  selector:
    matchLabels: &labels
      app: bingo
  template:
    metadata:
      labels: *labels
    spec:
      serviceAccountName: bingo
      initContainers:
      - name: init
        image: &bingo bingo
        command: [ /scripts/init.sh ]
        volumeMounts:
        - name: shared
          mountPath: /shared
        - name: scripts
          mountPath: /scripts
      containers:
      - name: git-sync
        image: k8s.gcr.io/git-sync/git-sync:v3.6.1
        command:
        - sh
        - -c
        - |
            exec /git-sync \
              --ssh \
              --ssh-known-hosts=false \
              --ssh-known-hosts-file=/dev/null \
              --dest=repo \
              --wait="$(cat /config/period)" \
              --repo="$(cat /config/repo)" \
              --branch="$(cat /config/branch)" \
              --rev="$(cat /config/rev)" \
              --exechook-command="/scripts/poke.sh"
        volumeMounts:
        - name: creds
          mountPath: /etc/git-secret/ssh
          readOnly: true
          subPath: ssh-key
        - name: shared
          mountPath: /shared
        - name: scripts
          mountPath: /scripts
        - name: data
          mountPath: /tmp/git
        - name: config
          mountPath: /config
      - name: bingo
        image: *bingo
        command: [ /scripts/bingo.sh ]
        volumeMounts:
        - name: shared
          mountPath: /shared
        - name: scripts
          mountPath: /scripts
        - name: data
          mountPath: /data
        - name: tmp
          mountPath: /tmp
        - name: config
          mountPath: /config
      volumes:
      - name: creds
        secret:
          secretName: bingo-creds
      - name: shared
        emptyDir:
          medium: Memory
      - name: data
        emptyDir:
          medium: Memory
      - name: tmp
        emtyDir:
          medium: Memory
      - name: scripts
        configMap:
          name: bingo-scripts
          defaultMode: 0755
      - name: config
        configMap:
          name: bingo-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: bingo-scripts
  namespace: #@ dv.bingo.namespace
data:
  init.sh: |
    #!/usr/bin/env bash

    set -e
    set -u
    set -o pipefail

    rm -rf -- /shared/pipe
    mkfifo -m 0666 /shared/pipe
  bingo.sh: |
    #!/usr/bin/env bash

    set -e
    set -u
    set -o pipefail

    readonly ME='bingo'

    apply() (
      local cmd="$1"
      local configDir="${2:-.}"
      local clusterConf
      local clustersDir workloadDir workloadDirs=()
      local clusterNS clusterName

      workDir="$( mktemp -d -t "XXXXXXXX-apply" )"
      trap 'rm -rf -- "$workDir"' EXIT

      local clustersDir
      clustersDir="${workDir}/clusters"
      mkdir -p "$clustersDir"

      while read -r -d $'\0' clusterConf
      do
        IFS='/' read -r clusterNS clusterName _ <<< "$clusterConf"

        {
          # Ugghhhh
          printf '#@ ns = "%s"\n' "$clusterNS"
          printf '#@ cluster = "%s"\n' "$clusterName"
          printf -- '---\n'

          cat "$clusterConf"
        } > "${clustersDir}/${clusterNS}-${clusterName}.yml"

        workloadDir="${workDir}/${clusterNS},${clusterName}"
        mkdir -p "$workloadDir"
        workloadDirs+=( "$workloadDir" )
        find "${clusterNS}/${clusterName}" -mindepth 1 -maxdepth 1 -type f -iname '*workload*yml' \
          -exec cp '{}' "${workloadDir}" ';'
      done < <(find . -maxdepth 3 -mindepth 3 -type f -name 'cluster.yml' -printf '%P\0')

      applyClusters "$clustersDir"

      for workloadDir in "${workloadDirs[@]}" ; do
        IFS=',' read -r clusterNS clusterName <<< "$(basename "$workloadDir")"
        applyWorkload "$clusterNS" "$clusterName" "$workloadDir" "$configDir" || {
          log 'applying cluster workloads for %s/%s failed' "$clusterNS" "$clusterName"
        }
      done
    )

    applyWorkload() {
      local ns="$1"
      local cluster="$2"
      local dir="$3"
      local configDir="$4"
      local app="${ME}-${cluster}-workload"

      local secret="${cluster}-kubeconfig"
      local kconf="${dir}/${app}.kconf"

      log 'deploying workloads on cluster %s/%s' "$ns" "$cluster"

      kubectl -n "$ns" get secret "${secret}" \
        -o go-template='{{ .data.value | base64decode }}' \
        > "$kconf" || {
        log 'kubeconfig %q for cluster %s/%s not found (yet?)' "$secret" "$ns" "$cluster"
        return
      }

      ytt -v configDir="$configDir" -v clusterNS="$ns" -v cluster="$clusterName" -f "$dir" -f /config/kapp-config.yml --allow-symlink-destination /config/ \
        | kapp --kubeconfig "$kconf" deploy -c --namespace default -y --dangerous-allow-empty-list-of-resources -a "$app" -f -
    }

    log() {
      local msg="$1"
      shift

      printf >&2 -- "## ${msg}\n" "$@"
    }

    applyClusters() {
      local dir="$1"
      local app="${ME}-clusters"

      log 'deploying clusters'

      ytt -f "$dir" -f /config/kapp-config.yml --allow-symlink-destination /config/ \
        | kapp deploy -c -y --dangerous-allow-empty-list-of-resources -a "$app" -f -
    }

    startPoker() {
      while true ; do
        sleep "$( cat /config/apply_interval )"
        echo reapply > /shared/pipe
      done
    }

    main() {
      local cmd
      local pipe='/shared/pipe'
      local poker

      startPoker &
      poker="$!"

      while true
      do
        read -r cmd < "$pipe"

        case "$cmd" in
          reload)
            log 'reloading bingo runner'
            test -n "$poker" && kill "$poker"
            exec "$0" "$@"
            ;;
          exit|quit|stop)
            log 'stopping bingo runner'
            exit 10
            ;;
          *)
            local subDir="$( cat /config/dir )"
            cd "/data/repo/${subDir}"
            log "got '$cmd', running apply in ${PWD}"
            apply "$cmd" "${subDir}"
            ;;
        esac
      done
    }

    rc=0
    main "$@" || rc=$?

    if [[ $rc -gt 0 ]] ; then
      log "bingo runner's main exited with: $rc"
      exit $rc
    fi
  poke.sh: |
    #!/bin/sh

    set -e
    set -u

    echo 'apply' > /shared/pipe
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: bingo-config
  namespace: #@ dv.bingo.namespace
data:
  repo: #@ dv.repo.url
  branch: #@ dv.repo.branch
  rev: #@ dv.repo.rev
  period: #@ dv.repo.period
  dir: #@ dv.repo.dir
  apply_interval: #@ dv.bingo.interval
  kapp-config.yml: |
    apiVersion: kapp.k14s.io/v1alpha1
    kind: Config
    waitRules:
    - resourceMatchers: &tkcs
      - apiVersionKindMatcher: {apiVersion: run.tanzu.vmware.com/v1alpha2, kind: TanzuKubernetesCluster}
      conditionMatchers:
      - type: Ready
        status: "True"
        success: true
      # supportsObservedGeneration: true
    rebaseRules:
    - &tkcRebaseRules
      resourceMatchers: *tkcs
      paths:
      - [ metadata, labels, run.tanzu.vmware.com/tkr ]
      - [ spec, distribution, fullVersion ]
      - [ spec, settings, network, cni, name ]
      - [ spec, settings, network, pods, cidrBlocks ]
      - [ spec, settings, network, serviceDomain ]
      - [ spec, settings, network, services, cidrBlocks ]
      - [ spec, topology, controlPlane, tkr, reference, name ]
      - [ spec, topology, nodePools, {allIndexes: true}, tkr, reference, name ]
      type: copy
      sources: [ new, existing ]
---
apiVersion: v1
kind: Secret
metadata:
  name: bingo-creds
  namespace: #@ dv.bingo.namespace
stringData:
  ssh-key: #@ dv.repo["priv-key"]
